var sites = {
    {{range .sites}}
    {{json .ID}}: {{json .}},
    {{- end}}
};

var airspace;
var map;
var weather = {}
var infoWindow = new google.maps.InfoWindow({});

const landColor = "20e000";
var pinImage = new google.maps.MarkerImage(
    "http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=L|" + landColor,
    new google.maps.Size(21, 34),
    new google.maps.Point(0, 0),
    new google.maps.Point(10, 34)
);

var parkingImage = new google.maps.MarkerImage(
    "img/parking.png",
    new google.maps.Size(21, 34),
    new google.maps.Point(0, 0),
    new google.maps.Point(10, 34)
);

function weatherImage(windSpeed, windDirection) {
    return new google.maps.MarkerImage(
        "/{{.apiVersion}}/wind-indicator/" + windSpeed + "/" + windDirection,
        new google.maps.Size(80, 80),
        null,
        new google.maps.Point(40, 40));
}

function enrich_sites() {
    for (var id of Object.keys(sites)) {
        enrich_site(sites[id]);
    }
}

function enrich_site(s) {
    var icon = icon_url("small", s.ID);
    s.parkings = create_markers(s, s.Parking, parkingImage);
    s.takeoffs = create_markers(s, s.Takeoff, {url: icon, anchor: new google.maps.Point(12, 12)});
    s.landings = create_markers(s, s.Landing, pinImage);
}

function show_url(id) {
    var url = "#" + id;
    $('#url-dialog').html(
        "<p>Copy the following link to share.</p>" +
        "<a href='" + url + "'>Direct Link</a>"
    );
    console.log("show_url(" + id + ")");
    $('#url-dialog').dialog();
}

function add_info_window(site, marker, lat, lon) {
    var name = site.Name;
    var id = site.ID;
    var icon = icon_url("large", id);
    var wind = site.Wind.map(function(x) {return x.Text})

    var f = function () {
        infoWindow.setContent(
            "<div>" +
            "<h1>" + name + "</h1>" +
            "<div style='padding: 0.5em;'>" +
            "<img src='" + icon + "' title='" + wind + "'/>" +
            "</div>" +
            "<p style='font-size: 120%; font-weight: bold;'>Wind: " + wind + "</p>" +
            "<p>" +
            "<a href='" + site.SiteGuide + "' target='guide'>Guide</a><br/>" +
            "<a href='" + maps_url(lat, lon, 9, false) + "'>Directions</a><br/>" +
            "<a href='" + maps_url(lat, lon, 15, true) + "'>Satellite View</a><br/>" +
            "<a href='http://www.streetmap.co.uk/ids.srf?mapp=map.srf&searchp=ids&name=" + lat + "," + lon + "&type=LatLong'>OS Map</a><br/>" +
            "<a href='javascript:show_url(\"" + id + "\")'>Bookmark Site</a><br/>" +
            "</p>" +
            "</div>");
        infoWindow.open(map, marker);
    };
    google.maps.event.addListener(marker, 'click', f);
    site.info = f;
}

function create_markers(s, places, icon) {
    var i;
    for (i = 0; i < places.length; i++) {
        var t = places[i];
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(t.lat, t.lon),
            map: map,
            title: s.Name,
            icon: icon,
            draggable: false,
        });
        t.marker = marker;
        add_info_window(s, marker, t.lat, t.lon);
    }
    return places;
}

function icon_url(type, id) {
    return "/{{.apiVersion}}/site-icons/" + type + "/" + id + ".png";
}

function maps_url(lat, lng, zoom, satellite) {
    //return "https://www.google.co.uk/maps/place/" + String(lat) + "," + String(lng) + "/@" + String(lat) + "," + String(lng) + "," + String(zoom) + "z";
    //return "https://www.google.com/maps/embed/v1/place?key=XXXXXXX&q=" + String(lat) + "," + String(lng) + "&zoom=" + String(zoom) + "z&maptype=" + (satellite ? "satellite" : "roadmap");
    //return "http://maps.google.com/maps?q=" + lat + "," + lng + "&t=(satellite ? "k" : "m")
    var t = (satellite ? "k" : "m")
    var latlon = lat + "," + lng;
    return "https://maps.google.com/?q=" + latlon + "&ll=" + latlon + "&t=" + t + "&z=" + zoom;
}

function initialize() {
    var myLatlng = new google.maps.LatLng(53.23455851981886, -1.8269212925847522);
    var mapOptions = {
        zoom: 8,
        center: myLatlng,
        mapTypeControlOptions: {
            style: google.maps.MapTypeControlStyle.DEFAULT,
            position: google.maps.ControlPosition.BOTTOM_LEFT
        },
    }
    map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);
    enrich_sites();

    if (sites[window.location.hash.substring(1)]) {
        sites[window.location.hash.substring(1)].info();
    }

    const imageBounds = {
        north: 59.0,
        south: 49.5,
        east:   2.0,
        west:  -6.5,
    };

    airspace = createAirspace();

    toggleWeather();
    toggleLanding();
    toggleParking();
    toggleAirspace();

    addListeners();
}

function toggleLanding() {
    var vis = $('#toggleLanding').prop('checked');
    var s, site
    for (s in sites) {
        site = sites[s];
        var i;
        for (i = 0; i < site.landings.length; i++) {
            site.landings[i].marker.setMap(vis ? map : null);
        }
    }
}

function toggleParking() {
    var vis = $('#toggleParking').prop('checked');
    var s, site
    for (s in sites) {
        site = sites[s];
        var i;
        for (i = 0; i < site.parkings.length; i++) {
            site.parkings[i].marker.setMap(vis ? map : null);
        }
    }
}

function toggleAirspace() {
    var vis = $('#toggleAirspace').prop('checked');
    var mapParam = vis ? map : null;
    var i;
    for (i in airspace) {
        airspace[i].setMap(mapParam);
    }
}

function metTitle(obs) {
    var title = obs.Name + "(" + obs.WindSpeed + "mph";
    if (obs.WindDirection != "") {
        title += " from " + obs.WindDirection
    }
    title += ")"
    if (obs.Weather != "") {
        title += " : " + obs.Weather
    }
    return title
}

function toggleWeather() {
    var vis = $('#toggleWeather').prop('checked');
    console.log("toggleWeather: vis=" + vis);

    if (!vis) {
        for (const ID in weather) {
            weather[ID].setMap(null);
        }
        weather = {}
        return;
    }

    $.ajax({
        url: "/{{.apiVersion}}/weather/",
        dataType: 'JSON',
        success: function(w){
            console.log("Got weather", w)
            for (const obs of w) {
                if (weather[obs.ID]) {
                    weather[obs.ID].setIcon(weatherImage(obs.WindSpeed,obs.WindDirection));
                    weather[obs.ID].setTitle(metTitle(obs));
                } else {
                    weather[obs.ID] = new google.maps.Marker({
                        position: new google.maps.LatLng(obs.Lat, obs.Lon),
                        map: map,
                        title: metTitle(obs),
                        icon: weatherImage(obs.WindSpeed,obs.WindDirection),
                        draggable: false,
                    });
                    weather[obs.ID].addListener('click', () => {
                            infoWindow.setContent(
                                "<div>" +
                                "<h1>" + metTitle(obs) + "</h1>" +
                                "<table>" +
                                "<tr><th></th><td></td></tr>" +
                                "<tr><th>Station</th><td>" + obs.ID + " - " + obs.Name + "</td></tr>" +
                                "<tr><th>Weather</th><td>" + obs.WeatherId + " - " + obs.Weather + "</td></tr>" +
                                "<tr><th>Wind Speed</th><td>" + obs.WindSpeed + "</td></tr>" +
                                "<tr><th>Wind Direction</th><td>" + obs.WindDirection + "</td></tr>" +
                                "<tr><th>Gust</th><td>" + obs.Gust + "</td></tr>" +
                                "<tr><th>Temperature</th><td>" + obs.Temperature + "</td></tr>" +
                                "<tr><th>Elevation</th><td>" + obs.Elevation + "</td></tr>" +
                                "<tr><th>Pressure</th><td>" + obs.Pressure + "</td></tr>" +
                                "<tr><th>PressureTendency</th><td>" + obs.PressureTendency + "</td></tr>" +
                                "</table>" +
                                "</div>");
                            infoWindow.open(map, weather[obs.ID]);
                        });
                }
            }

            for (const ID in weather) {
                weather[ID].setMap(map);
            }
        },
        error: function (xhr,status,err) {
            console.log("Weather failed", status, err)
        }
    });
}

function addListeners() {
    google.maps.event.addListener(map, "rightclick", function(event) {
            console.log("Event", event);
            var lat = event.latLng.lat();
            var lng = event.latLng.lng();
            // populate yor box/field with lat, lng
            alert("Lat=" + lat + "; Lng=" + lng);
    });
    console.log("addListeners exit");
}

console.log("End of sites.js");